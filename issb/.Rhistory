}
get_haz = function(x, pars)
{
h = numeric(length(cvec))
h[1] = cvec[1]*x[1]
h[2] = cvec[2]*x[1]*x[2]
h[3] = cvec[3]*x[2]
return(h)
}
m = create_model(smat, get_haz, c(1,1,1))
m$get_haz(c(1,1))
create_model = function(stoic, hazards, pars) {
get_stoic = function() stoic
get_haz = function(x, pars)  hazards(x, pars)
return(list(get_stoic = get_stoic, get_haz=get_haz))
}
m = create_model(smat, get_haz, c(1,1,1))
m$get_haz(c(1,1))
##Get vector of hazards for LV
get_haz = function(x, pars)
{
h = numeric(length(pars))
h[1] = cvec[1]*x[1]
h[2] = cvec[2]*x[1]*x[2]
h[3] = cvec[3]*x[2]
return(h)
}
create_model = function(stoic, hazards, pars) {
get_stoic = function() stoic
get_haz = function(x, pars)  hazards(x, pars)
return(list(get_stoic = get_stoic, get_haz=get_haz))
}
m = create_model(smat, get_haz, c(1,1,1))
m$get_haz(c(1,1))
create_model = function(stoic, hazards, pars) {
pars = pars
get_stoic = function() stoic
get_haz = function(x, pars)  hazards(x, pars)
return(list(get_stoic = get_stoic, get_haz=get_haz))
}
m = create_model(smat, get_haz, c(1,1,1))
m$get_haz(c(1,1))
##Get vector of hazards for LV
get_haz = function(x, pars)
{
h = numeric(length(pars))
h[1] = pars[1]*x[1]
h[2] = pars[2]*x[1]*x[2]
h[3] = pars[3]*x[2]
return(h)
}
create_model = function(stoic, hazards, pars) {
pars = pars
get_stoic = function() stoic
get_haz = function(x, pars)  hazards(x, pars)
return(list(get_stoic = get_stoic, get_haz=get_haz))
}
m = create_model(smat, get_haz, c(1,1,1))
m$get_haz(c(1,1))
create_model = function(stoic, hazards, pars) {
get_stoic = function() stoic
get_haz = function(x, pars=pars)  hazards(x, pars)
return(list(get_stoic = get_stoic, get_haz=get_haz))
}
m = create_model(smat, get_haz, c(1,1,1))
m$get_haz(c(1,1))
m$get_haz
m$get_haz(c(1,1), c(1,1,1))
create_model = function(stoic, hazards, pars) {
get_stoic = function() stoic
get_haz = function(x)  hazards(x, pars)
return(list(get_stoic = get_stoic, get_haz=get_haz))
}
m = create_model(smat, get_haz, c(1,1,1))
m$get_haz(c(1,1))
create_model = function(stoic, hazards, pars) {
get_stoic = function() stoic
get_haz = function(x)  hazards(x, pars)
return(list(get_stoic = get_stoic, get_haz=get_haz))
}
m = create_model(smat, get_haz, c(1,1,1))
m$get_haz(c(10,1))
create_model = function(stoic, hazards, pars) {
get_stoic = function() stoic
get_haz = function(x)  hazards(x, pars)
m =list(get_stoic = get_stoic, get_haz=get_haz)
class(m) = "skm"
return(m)
}
m = create_model(smat, get_haz, c(1,1,1))
m$get_haz(c(10,1))
m
roxygenise("../issb/")
fix(compare_time)
#The Lokta-Volterra model
#A hazard function
h = function(x, pars) {
hars = numeric(length(pars))
hars[1] = pars[1]*x[1]
hars[2] = pars[2]*x[1]*x[2]
hars[3] = pars[3]*x[2]
return(hars)
}
#The stoichiometric matrix
smat = matrix(0,nrow=2,ncol=3)
smat[1,1] = 1
smat[1,2] = -1
smat[2,2] = 1
smat[2,3] = -1
rownames(smat) = c("Prey", "Predator")
#Build the model
create_model(smat, hars, c(0.5,0.0025,0.3))
?ode
create_model = function(stoic, hazards, initial, pars) {
get_stoic = function() stoic
get_haz = function(x)  hazards(x, pars)
get_pars = function()  pars
m =list(stoic = get_stoic, haz=get_haz, pars=get_pars)
class(m) = "skm"
return(m)
}
#'  return(hazs)
h
create_model(smat, h, c(100, 100), pars)
mrefun = function(t, z, pars, model)
{
s = model$stoich()
return(list(as.vector(s %*% model$haz(z, pars))))
}
deterministic = function(model, maxtime, dt=0.01)
{
grid = seq(0, maxtime, dt)
sol = ode(model$initial(), func=mrefun, times=grid, parms=model$pars())
colnames(sol) = c("Time", rownames(get_stoich()))
return(sol)
}
cget_pars = function(pars=pars)  pars
create_mode(smat, h, c(100,100), pars)
m = create_model(smat, h, c(100,100), pars)
m
deterministic(m, 10)
create_model = function(stoic, hazards, initial, pars) {
get_stoic = function() stoic
get_haz = function(x)  hazards(x, pars)
get_pars = function(pars=pars)  pars
get_initial = function(initial=initial) initial
m =list(stoic = get_stoic, haz=get_haz,
pars=get_pars, initial=get_initial)
class(m) = "skm"
return(m)
}
m = create_model(smat, h, c(100,100), pars)
m$initial
m$initial()
create_model = function(stoic, hazards, initial, pars) {
get_stoic = function() stoic
get_haz = function(x)  hazards(x, pars)
get_pars = function(pars=pars)  pars
get_initial = function(initial) initial
m =list(stoic = get_stoic, haz=get_haz,
pars=get_pars, initial=get_initial)
class(m) = "skm"
return(m)
}
m = create_model(smat, h, c(100,100), pars)
m$initial()
deterministic(m, 10)
m$initial()
reate_model = function(stoic, hazards, initial, pars) {
get_stoic = function() stoic
get_haz = function(x)  hazards(x, pars)
get_pars = function(pars=pars)  pars
get_initial = function(i = initial) i
m =list(stoic = get_stoic, haz=get_haz,
pars=get_pars, initial=get_initial)
class(m) = "skm"
return(m)
}
m = create_model(smat, h, c(100,100), pars)
m$initial
m$initial()
create_model = function(stoic, hazards, initial, pars) {
initial = initial
get_stoic = function() stoic
get_haz = function(x)  hazards(x, pars)
get_pars = function(pars=pars)  pars
get_initial = function(i = initial) i
m =list(stoic = get_stoic, haz=get_haz,
pars=get_pars, initial=get_initial)
class(m) = "skm"
return(m)
}
m = create_model(smat, h, c(100,100), pars)
m$initial()
create_model = function(stoic, hazards, initial, pars) {
initial = initial
pars = pars
get_stoic = function() stoic
get_haz = function(x)  hazards(x, pars)
get_pars = function(p=pars)  p
get_initial = function(i = initial) i
m =list(stoic = get_stoic, haz=get_haz,
pars=get_pars, initial=get_initial)
class(m) = "skm"
return(m)
}
m = create_model(smat, h, c(100,100), pars)
m$initial()
deterministic(m, 10)
mrefun = function(t, z, pars, model)
{
s = model$stoic()
return(list(as.vector(s %*% model$haz(z, pars))))
}
deterministic(m, 10)
mrefun = function(t, z, pars, stoic, haz)
{
s = model$stoic()
return(list(as.vector(s %*% haz(z, pars))))
}
deterministic = function(model, maxtime, dt=0.01)
{
grid = seq(0, maxtime, dt)
sol = ode(model$initial(), func=mrefun, times=grid, parms=model$pars(),
model$stoic(), model$haz
colnames(sol) = c("Time", rownames(get_stoich()))
return(sol)
}
deterministic(m, 10)
deterministic = function(model, maxtime, dt=0.01)
{
grid = seq(0, maxtime, dt)
sol = ode(model$initial(), func=mrefun, times=grid, parms=model$pars(),
model$stoic(), model$haz)
colnames(sol) = c("Time", rownames(get_stoich()))
return(sol)
}
deterministic(m, 10)
model$pars()
m$pars()
create_model = function(stoic, hazards, initial, pars) {
initial = initial
pars = pars
get_stoic = function() stoic
get_haz = function(x)  hazards(x, pars)
get_pars = function(p=pars)  p
get_initial = function(i = initial) i
m =list(stoic = get_stoic, haz=get_haz,
pars=get_pars, initial=get_initial)
class(m) = "skm"
return(m)
}
m = create_model(smat, h, c(100,100), pars)
m$initial()
m$pars()
create_model = function(stoic, hazards, initial, pars) {
initial = initial
pars = pars
get_stoic = function() stoic
get_haz = function(x)  hazards(x, pars)
get_pars = function(p=pars)  p
get_initial = function(i = initial) i
m =list(get_stoic = get_stoic, get_haz=get_haz,
get_pars=get_pars, get_initial=get_initial)
class(m) = "skm"
return(m)
}
m = create_model(smat, h, c(100,100), pars)
m$get_initial()
m
create_model = function(stoic, hazards, initial, pars) {
initial = initial
pars = pars
get_stoic = function() stoic
get_haz = function(x)  hazards(x, pars)
get_pars = function(p=pars)  p
get_initial = function(i = initial) i
m =list(get_stoic = get_stoic, get_haz=get_haz,
get_pars=get_pars, get_initial=get_initial)
class(m) = "skm"
return(m)
}
m = create_model(smat, h, c(100,100), pars)
m = create_model(smat, h, c(100,100), c(0.1, 0.1, 0.1))
m$get_initial()
m$get_pars()
deterministic = function(model, maxtime, dt=0.01)
{
grid = seq(0, maxtime, dt)
sol = ode(model$get_initial(), func=mrefun, times=grid, parms=model$get_pars(),
model$get_stoic(), model$get_haz)
colnames(sol) = c("Time", rownames(get_stoich()))
return(sol)
}
deterministic(m, 10)
mrefun = function(t, z, pars, model)
{
s = model$get_stoic()
haz = model$get_haz
#  s = stoic
return(list(as.vector(s %*% haz(z, pars))))
}
deterministic = function(model, maxtime, dt=0.01)
{
grid = seq(0, maxtime, dt)
sol = ode(model$get_initial(), func=mrefun, times=grid, model$get_pars(), model)
colnames(sol) = c("Time", rownames(get_stoich()))
return(sol)
}
deterministic(m, 10)
fix(deterministic)
deterministic = function(model, maxtime, dt=0.01)
{
grid = seq(0, maxtime, dt)
sol = ode(model$get_initial(), func=mrefun, times=grid, model$get_pars(), model)
colnames(sol) = c("Time", rownames(get_stoich()))
return(sol)
}
deterministic(m, 10)
mrefun = function(t, z,  model)
{
pars = model$get_pars()
s = model$get_stoic()
haz = model$get_haz
#  s = stoic
return(list(as.vector(s %*% haz(z, pars))))
}
deterministic = function(model, maxtime, dt=0.01)
{
grid = seq(0, maxtime, dt)
sol = ode(model$get_initial(), func=mrefun, times=grid, model)
colnames(sol) = c("Time", rownames(get_stoich()))
return(sol)
}
deterministic(m, 10)
create_model = function(stoic, hazards, initial, pars) {
initial = initial
pars = pars
get_stoic = function() stoic
get_haz = function(x, p=pars)  hazards(x, p)
get_pars = function(p=pars)  p
get_initial = function(i = initial) i
m =list(get_stoic = get_stoic, get_haz=get_haz,
get_pars=get_pars, get_initial=get_initial)
class(m) = "skm"
return(m)
}
m = create_model(smat, h, c(100,100), c(0.1, 0.1, 0.1))
m$get_pars()
mrefun = function(t, z,  model)
{
pars = model$get_pars()
s = model$get_stoic()
haz = model$get_haz
#  s = stoic
return(list(as.vector(s %*% haz(z))))
}
#' @title Calculates the deterministic solution
#' @param model a skm object, created using the create_model function
#' @param maxtime the maximum simulation time
#' @param dt the output grid size. Note this doesn't (really) affect the underlying ODE solver
#' @author Colin Gillespie
#' @return A matix
#' @seealso create_model
#' @keywords character
#' @export
#'
deterministic = function(model, maxtime, dt=0.01)
{
grid = seq(0, maxtime, dt)
sol = ode(model$get_initial(), func=mrefun, times=grid, model)
colnames(sol) = c("Time", rownames(get_stoich()))
return(sol)
}
deterministic(m, 10)
mrefun = function(t, z,  model)
{
pars = model$get_pars()
s = model$get_stoic()
haz = model$get_haz
#  s = stoic
return(list(as.vector(s %*% haz(z))))
}
#' @title Calculates the deterministic solution of a skm
#' @param model a skm object, created using the create_model function
#' @param maxtime the maximum simulation time
#' @param dt the output grid size. Note this doesn't (really) affect the underlying ODE solver
#' @author Colin Gillespie
#' @return A matix. The first column contains the simulation time, the other columns contain the species
#' levels
#' @seealso create_model
#' @keywords character
#' @export
#'
deterministic = function(model, maxtime, dt=0.01)
{
grid = seq(0, maxtime, dt)
sol = ode(model$get_initial(), func=mrefun, times=grid, model)
colnames(sol) = c("Time", rownames(get_stoich()))
return(sol)
}
mrefun = function(t, z,  model)
{
s = model$get_stoic()
haz = model$get_haz
return(list(as.vector(s %*% haz(z))))
}
#' @title Calculates the deterministic solution of a skm
#' @param model a skm object, created using the create_model function
#' @param maxtime the maximum simulation time
#' @param dt the output grid size. Note this doesn't (really) affect the underlying ODE solver
#' @author Colin Gillespie
#' @return A matix. The first column contains the simulation time, the other columns contain the species
#' levels
#' @seealso create_model
#' @keywords character
#' @export
deterministic = function(model, maxtime, dt=0.01)
{
grid = seq(0, maxtime, dt)
sol = ode(model$get_initial(), func=mrefun, times=grid, model)
colnames(sol) = c("Time", rownames(get_stoich()))
return(sol)
}
deterministic(model, 10)
deterministic(m, 10)
#' @title Calculates the deterministic solution
#' @inheritParams detsol
#' @author Colin Gillespie
#' @return A matix
#' @keywords character
#' @export
#'
gillespie = function(model, maxtime)
{
sim_time = 0; i = 1; x = model$get_initial()
N = 100000
xmat = matrix(0, nrow=N, ncol=(length(x) + 1))
xmat[i, ] = c(sim_time, x)
s = model$get_stoich()
get_haz = model$get_haz
h = get_haz(x)
p = model$get_pars()
while(sim_time < maxtime && sum(h) > 0){
sim_time = sim_time + rexp(1, sum(h))
j = sample(length(p), 1, prob=h)
x = x + s[ ,j]
i = i + 1
xmat[i, ] = c(sim_time, x)
h = get_haz(x)
}
if(sim_time < maxtime) {
xmat[i+1,] = xmat[i,]
xmat[i+1,1] = maxtime
} else {
xmat[i,1] = maxtime
}
colnames(xmat) = c("Time", rownames(s))
return(xmat[1:i,])
}
gillespie(m, 10)
m
m$get_pars()
model = m
sim_time = 0; i = 1; x = model$get_initial()
N = 100000
xmat = matrix(0, nrow=N, ncol=(length(x) + 1))
xmat[i, ] = c(sim_time, x)
s = model$get_stoich()
get_haz = model$get_haz
h = get_haz(x)
p = model$get_pars()
s = model$get_stoic()
s
#' @title Calculates the deterministic solution
#' @inheritParams detsol
#' @author Colin Gillespie
#' @return A matix
#' @keywords character
#' @export
#'
gillespie = function(model, maxtime)
{
sim_time = 0; i = 1; x = model$get_initial()
N = 100000
xmat = matrix(0, nrow=N, ncol=(length(x) + 1))
xmat[i, ] = c(sim_time, x)
s = model$get_stoic()
get_haz = model$get_haz
h = get_haz(x)
p = model$get_pars()
while(sim_time < maxtime && sum(h) > 0){
sim_time = sim_time + rexp(1, sum(h))
j = sample(length(p), 1, prob=h)
x = x + s[ ,j]
i = i + 1
xmat[i, ] = c(sim_time, x)
h = get_haz(x)
}
if(sim_time < maxtime) {
xmat[i+1,] = xmat[i,]
xmat[i+1,1] = maxtime
} else {
xmat[i,1] = maxtime
}
colnames(xmat) = c("Time", rownames(s))
return(xmat[1:i,])
}
model = m
gillespie(m, 10)
fix(x)
roxygenise("../issb/")
